#include <SFML/Graphics.hpp>
#include <iostream>

using namespace sf;
using namespace std;

Texture spritesheet;
Sprite eggsprite;
Clock clock;

void Reset();

const Keyboard::Key controls[3] = {
    Keyboard::W,   // Player1 Up
    Keyboard::A,   // Player1 Left
    Keyboard::D,  // Player1 Right
};

// Define an enum for player states
enum EggState {
    STANDING,
    WALKING_LEFT,
    WALKING_RIGHT,
    RISNG,
    FALLING,
    DYING
};

const Vector2f platformSize(800.f, 100.f);
const int gameWidth = 800;
const int gameHeight = 600;
const float ballRadius = 10.f;
Vector2f ballVelocity;
const float ballHorizontalSpeed = 400.f;
const float ballJumpSpeed = -3000.f;
const float initialVelocityY = 100.f;
bool canJump = false;
float dt;

CircleShape ball;
RectangleShape platform[1];

void Load() {

    // Set size and origin of platform
    //for (auto &p : platform) {
      //p.setSize(platformSize);
      //p.setOrigin(platformSize / 2.f);


    // Set size and origin of ball
    ball.setRadius(ballRadius);
    ball.setOrigin(ballRadius, ballRadius); //Should be half the ball width and height

    // Reset positions
    //platform[0].setPosition(Vector2f(platformSize.x / 2.f, gameHeight / 12.f));
    ball.setPosition(Vector2f(gameWidth / 2.f, gameHeight / 2.f));

    // Set Ball falling speed
    ballVelocity = { 0, initialVelocityY };

    if (!spritesheet.loadFromFile("res/Egg_with_Legg_spritesheet3.png")) {
        cerr << "Failed to load spritesheet!" << std::endl;
    }
    eggsprite.setTexture(spritesheet);
    //border goes from 0-111,0-126. actual sprite is (x) 1-110, (y) 1-125
    // eggsprite.setTextureRect(IntRect(Vector2i(1, 1), Vector2i(110, 125)));
    eggsprite.setTextureRect(IntRect(1, 1, 110, 125));
    // eggsprite(spritesheet, setTextureRect);

    //Start player as standing
    Player.setState(STANDING);

}

class Player {
public:
    // Constructor to initialize the player state
    Player() : state(STANDING), frameCounter(0), animationSpeed(10) {}

    // Method to set the player's state
    void setState(EggState newState) {
        state = newState;
    }

    // Method to get the current player's state
    EggState getState() const {
        return state;
    }
}

private:
    int frameCounter;    // Tracks which frame of the animation to show
    int animationSpeed;  // Controls animation speed (higher = slower animation)

    void animateFrames(int startX, int startY, int frameCount) {
        // Calculate which frame to display based on frameCounter
        int currentFrame = (frameCounter / animationSpeed) % frameCount;

        // Set the texture rectangle to the current frame
        eggsprite.setTextureRect(sf::IntRect(startX + currentFrame * 32, startY, 32, 32));

        // Increment frameCounter for next update
        frameCounter++;
    }
};

void Update(RenderWindow &window) {

  // Reset clock, recalculate deltatime
  static Clock Stateclock;
  float dt = clock.restart().asSeconds();
  float elapsedTime = stateClock.getElapsedTime().asSeconds();
  // check and consume events
  Event event;
  while (window.pollEvent(event)) {
    if (event.type == Event::Closed) {
        window.close();
        return;
    }
  }

  switch (player.getState) {
    case STANDING:
        animateFrames(1, 1, 3); //(animates frames from grids 1-3)
        eggsprite.setScale(1, 1); // ensures scale is normal
        break;

    case WALKING_LEFT:
	//(animates grids 4-6, same for WALKING_RIGHT)
        animateFrames(1, 126, 3); //Same frames as WALKING_RIGHT
        eggsprite.setScale(-1, 1); //Flipped horizontally
        eggsprite.setOrigin(110, 1);
        break;

    case WALKING_RIGHT:
        animateFrames(1, 126, 3);
        eggsprite.setScale(1, 1);
        eggsprite.setOrigin(1, 1);
        break;

    case RISING:
        // Display the first frame for 0.2 seconds
        if (elapsedTime < 0.2f) {
		// First frame, squat...
        	eggsprite.setTextureRect(IntRect(223, 1, 110, 125)); //(coordinates for grid 3)
        }
        else {
		// Second frame, ...jump!
        	eggsprite.setTextureRect(IntRect(1, 253, 110, 125)); //(coordinates for grid 7)
        }
        eggsprite.setScale(1, 1);
        break; 

    case FALLING:
        // Display the first frame for 0.2 seconds
        if (elapsedTime < 0.2f) {
		// First frame
        	eggsprite.setTextureRect(IntRect(111, 253, 110, 125));  //(coordinates for grid 8)
        }
        else {
		// Second frame
        	eggsprite.setTextureRect(IntRect(223, 253, 110, 125)); //(coordinates for grid 9)
        }
        eggsprite.setScale(1, 1);
        break;
     case DYING:
	//(fixing scale not needed, doesn't matter if flipped horizontally)
	//egg cracks
	eggsprite.setTextureRect(IntRect(1, 379, 110, 125)); //(coordinates for grid 10)

	// TRIGGER GAME FREEZE

	//border goes from 0-111,0-126. actual sprite is (x) 1-110, (y) 1-125
	if (elapsedTime < 0.2f) {
		// First frame
        	eggsprite.setTextureRect(IntRect(112, 379, 110, 125)); //(coordinates for grid 11)
        }
        else {
		// Second frame
        	eggsprite.setTextureRect(IntRect(223, 379, 110, 125)); //(coordinates for grid 12)
        }
	break;
  }
  
  // Reset Ball falling speed
  //ballVelocity = { 0, initialVelocityY };

  if (ballVelocity.y < 100.f) {
      ballVelocity = { 0.f, ballVelocity.y + 10 };
  }

  // Reset Jump validity
  canJump = false;

  
  //ball.move(ballVelocity * dt);
  
  // Quit Via ESC Key
  if (Keyboard::isKeyPressed(Keyboard::Escape)) {
    window.close();
  }
  
  // handle ball movement (horizontal)
  float direction = 0.0f;
  if (Keyboard::isKeyPressed(controls[1])) {
    direction--;
    player.setState(WALKING_LEFT);
  }
  if (Keyboard::isKeyPressed(controls[2])) {
    direction++;
    player.setState(WALKING_RIGHT);
  }
  ball.move(Vector2f(direction * ballHorizontalSpeed * dt, 0.f));
  
  
  
  // Check Collision with platform
  
  const float bx = ball.getPosition().x;
  const float by = ball.getPosition().y;
  
  if (by > gameHeight - 11) { //bottom wall
    // bottom wall
    // ballVelocity.x *= velocityMultiplier;
     ballVelocity.y *= 0.f;
    // ball.move(Vector2f(0.f, -10.f));
     canJump = true;
     player.setState(STANDING);
  } else if (by < 0) { //top wall
    // top wall
    // ballVelocity.x *= velocityMultiplier;
    //ballVelocity.y *= 0;
    ball.move(Vector2f(0.f, 10.f));
    player.setState(FALLING);
  }

  // handle ball jump
  if (canJump == true) {
      if (Keyboard::isKeyPressed(controls[0])) {
          //ball.move(Vector2f(0.f, ballJumpSpeed * dt));
          ballVelocity = { 0.f, ballJumpSpeed };
          player.setState(RISING);
      }
  }
  
  ball.move(ballVelocity * dt);
  

  
}

  void Render(RenderWindow &window) {
    // Draw Everything
    window.draw(platform[0]);
    window.draw(ball);
    window.draw(eggsprite);
  }

    int main() {
    RenderWindow window(VideoMode(gameWidth, gameHeight), "PONG");
    Load();
	//Reset();
    while (window.isOpen()) {
        while (dt < 1/60){}
        window.clear();
        Update(window);
        Render(window);
        window.display();
    }

    /*
    const float frameTime = 1.0f / 60.0f;
    while (dt < frameTime) {
        dt += clock.restart().asSeconds();
    }
    */
    return 0;
}
